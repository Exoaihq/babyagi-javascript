Here's the converted JavaScript code:

```javascript
function openaiCall(prompt, temperature = 0, maxTokens = 2000) {
  // Add your OpenAI API call implementation here
}

function codeRefactorAgent(taskDescription, existingCodeSnippet, contextChunks, isolatedContext) {
  const prompt = `You are an AGI agent responsible for refactoring code to accomplish a given task. Your goal is to analyze the provided major objective of the project, the task descriptionm and refactor the code accordingly.

  The current task description is: ${taskDescription}
  To help you make the code useful in this codebase, use this context as reference of the other pieces of the codebase that are relevant to your task: ${isolatedContext}

  Here are some context chunks that might be relevant to the task:
  ${contextChunks}
  
  Existing code you should refactor: 
  ${existingCodeSnippet}
  
  Based on the task description, objective, refactor the existing code to achieve the task. Make sure the refactored code is relevant to the task and objective, follows best practices, etc.

  Return a plain text code snippet with your refactored code. IMPORTANT: JUST RETURN CODE, YOUR OUTPUT WILL BE ADDED DIRECTLY TO THE FILE BY OTHER AGENT. BE MINDFUL OF THIS:`;

  return openaiCall(prompt, temperature, maxTokens);
}

function fileManagementAgent(objective, task, currentDirectoryFiles, filePath) {
  const prompt = `You are an AGI agent responsible for managing files in a software project. Your goal is to analyze the provided major objective of the project and a single task from the JSON checklist generated by the previous agent, and determine the appropriate file path and name for the generated code.

  The overall objective is: ${objective}
  The current task is: ${task}
  Specified file path (relative path from the current dir): ${filePath}

  Make the file path adapted for the current directory files. The current directory files are: ${currentDirectoryFiles}. Assume this file_path will be interpreted from the root path of the directory.

  Do not use '.' or './' in the file path.

  BE VERY SPECIFIC WITH THE FILES, AVOID FILE DUPLICATION, AVOID SPECIFYING THE SAME FILE NAME UNDER DIFFERENT FOLDERS, ETC.

  Based on the task, determine the file path and name for the generated code. Return the file path and name as a JSON output with the following format: {"file_path": "file_path_and_name"}. ONLY return JSON output:`;

  return openaiCall(prompt, temperature, maxTokens);
}

function codeRelevanceAgent(objective, taskDescription, codeChunk) {
  const prompt = `You are an AGI agent responsible for evaluating the relevance of a code chunk in relation to a given task. Your goal is to analyze the provided major objective of the project, the task description, and the code chunk, and assign a relevance score from 0 to 10, where 0 is completely irrelevant and 10 is highly relevant.

  The overall objective is: ${objective}
  The current task description is: ${taskDescription}
  The code chunk is as follows (line numbers included):
  ${codeChunk}

  Based on the task description, objective, and code chunk, assign a relevance score between 0 and 10 (inclusive) for the code chunk. DO NOT OUTPUT ANYTHING OTHER THAN THE RELEVANCE SCORE AS A NUMBER.`;

  const relevanceScore = openaiCall(prompt, 0.5, 50);

  return JSON.stringify({ relevance_score: relevanceScore.trim() });
}

function taskHumanInputAgent(task, humanFeedback) {
  const prompt = `You are an AGI agent responsible for getting human input to improve the quality of tasks in a software project. Your goal is to analyze the provided task and adapt it based on the human's suggestions. The tasks should  start with either 'Run a command to...', 'Write code to...', or 'Edit existing code to...' depending on the agent that will execute the task.

  For context, this task will be executed by other AGI agents with the following characteristics:
  - code_writer_agent: Writes code snippets or functions and saves them to the appropriate files. This agent can also append code to existing files if required.
  - code_refactor_agent: Responsible for modifying and refactoring existing code to meet the requirements of the task.
  - command_executor_agent: Executes terminal commands for tasks such as creating directories, installing dependencies, etc.

  The current task is:
  ${task}

  The human feedback is:
  ${humanFeedback}

  If the human feedback is empty, return the task as is. If the human feedback is saying to ignore the task, return the following string: <IGNORE_TASK>

  Note that your output will replace the existing task, so make sure that your output is a valid task that starts with one of the required phrases ('Run a command t`;

  return openaiCall(prompt, temperature, maxTokens);
}
```